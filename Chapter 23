import java.util.*;
import java.util.ArrayList;

public class Sorting {

   public static void main(String[] args) {
       System.out.println("Times are all in milliseconds.");
       System.out.println("Array Size |  Selection  |  Merge  |  Quick  |  Heap  |  Radix");
       System.out.println("---------------------------------------------------------------");

       int[] intArray50000 = new int[50000];
       for (int i = 0; i < intArray50000.length; i++) {
           intArray50000[i] = (int) (Math.random() * 50000);
       }
       int[] intArray500002 = new int[50000];
       for (int i = 0; i < intArray500002.length; i++) {
           intArray500002[i] = (int) (Math.random() * 50000);
       }
       int[] intArray500003 = new int[50000];
       for (int i = 0; i < intArray500003.length; i++) {
           intArray500003[i] = (int) (Math.random() * 50000);
       }
       int[] intArray500004 = new int[50000];
       for (int i = 0; i < intArray500004.length; i++) {
           intArray500004[i] = (int) (Math.random() * 50000);
       }
       int[] intArray500005 = new int[50000];
       for (int i = 0; i < intArray500005.length; i++) {
           intArray500005[i] = (int) (Math.random() * 50000);
       }

       int[] intArray100000 = new int[100000];
       for (int i = 0; i < intArray100000.length; i++) {
           intArray100000[i] = (int) (Math.random() * 100000);
       }
       int[] intArray1000002 = new int[100000];
       for (int i = 0; i < intArray1000002.length; i++) {
           intArray1000002[i] = (int) (Math.random() * 100000);
       }
       int[] intArray1000003 = new int[100000];
       for (int i = 0; i < intArray1000003.length; i++) {
           intArray1000003[i] = (int) (Math.random() * 100000);
       }
       int[] intArray1000004 = new int[100000];
       for (int i = 0; i < intArray1000004.length; i++) {
           intArray1000004[i] = (int) (Math.random() * 100000);
       }
       int[] intArray1000005 = new int[100000];
       for (int i = 0; i < intArray1000005.length; i++) {
           intArray1000005[i] = (int) (Math.random() * 100000);
       }

       int[] intArray150000 = new int[100000];
       for (int i = 0; i < intArray150000.length; i++) {
           intArray150000[i] = (int) (Math.random() * 150000);
       }
       int[] intArray1500002 = new int[100000];
       for (int i = 0; i < intArray1500002.length; i++) {
           intArray1500002[i] = (int) (Math.random() * 150000);
       }
       int[] intArray1500003 = new int[100000];
       for (int i = 0; i < intArray1500003.length; i++) {
           intArray1500003[i] = (int) (Math.random() * 150000);
       }
       int[] intArray1500004 = new int[100000];
       for (int i = 0; i < intArray1500004.length; i++) {
           intArray1500004[i] = (int) (Math.random() * 150000);
       }
       int[] intArray1500005 = new int[100000];
       for (int i = 0; i < intArray1500005.length; i++) {
           intArray1500005[i] = (int) (Math.random() * 150000);
       }

       int[] intArray200000 = new int[200000];
       for (int i = 0; i < intArray200000.length; i++) {
           intArray200000[i] = (int) (Math.random() * 200000);
       }
       int[] intArray2000002 = new int[200000];
       for (int i = 0; i < intArray2000002.length; i++) {
           intArray2000002[i] = (int) (Math.random() * 200000);
       }
       int[] intArray2000003 = new int[200000];
       for (int i = 0; i < intArray2000003.length; i++) {
           intArray2000003[i] = (int) (Math.random() * 200000);
       }
       int[] intArray2000004 = new int[200000];
       for (int i = 0; i < intArray2000004.length; i++) {
           intArray2000004[i] = (int) (Math.random() * 200000);
       }
       int[] intArray2000005 = new int[200000];
       for (int i = 0; i < intArray2000005.length; i++) {
           intArray2000005[i] = (int) (Math.random() * 200000);
       }

       int[] intArray250000 = new int[250000];
       for (int i = 0; i < intArray250000.length; i++) {
           intArray250000[i] = (int) (Math.random() * 250000);
       }
       int[] intArray2500002 = new int[250000];
       for (int i = 0; i < intArray2500002.length; i++) {
           intArray2500002[i] = (int) (Math.random() * 250000);
       }
       int[] intArray2500003 = new int[250000];
       for (int i = 0; i < intArray2500003.length; i++) {
           intArray2500003[i] = (int) (Math.random() * 250000);
       }
       int[] intArray2500004 = new int[250000];
       for (int i = 0; i < intArray2500004.length; i++) {
           intArray2500004[i] = (int) (Math.random() * 250000);
       }
       int[] intArray2500005 = new int[250000];
       for (int i = 0; i < intArray2500005.length; i++) {
           intArray2500005[i] = (int) (Math.random() * 250000);
       }

       int[] intArray300000 = new int[300000];
       for (int i = 0; i < intArray300000.length; i++) {
           intArray300000[i] = (int) (Math.random() * 300000);
       }
       int[] intArray3000002 = new int[300000];
       for (int i = 0; i < intArray3000002.length; i++) {
           intArray3000002[i] = (int) (Math.random() * 300000);
       }
       int[] intArray3000003 = new int[300000];
       for (int i = 0; i < intArray3000003.length; i++) {
           intArray3000003[i] = (int) (Math.random() * 300000);
       }
       int[] intArray3000004 = new int[300000];
       for (int i = 0; i < intArray3000004.length; i++) {
           intArray3000004[i] = (int) (Math.random() * 300000);
       }
       int[] intArray3000005 = new int[300000];
       for (int i = 0; i < intArray3000005.length; i++) {
           intArray3000005[i] = (int) (Math.random() * 300000);
       }

       long startTime = System.currentTimeMillis();
       selectionSort(intArray50000);
       long endTime = System.currentTimeMillis();
       long executionTime = endTime - startTime;
       System.out.print("50,000     |   " + executionTime);

       long startTime2 = System.currentTimeMillis();
       mergeSort(intArray500002);
       long endTime2 = System.currentTimeMillis();
       long executionTime2 = endTime2 - startTime2;
       System.out.print("      |   " + executionTime2);

       long startTime3 = System.currentTimeMillis();
       quickSort(intArray500003);
       long endTime3 = System.currentTimeMillis();
       long executionTime3 = endTime3 - startTime3;
       System.out.print("    |   " + executionTime3);

       long startTime4 = System.currentTimeMillis();
       heapSort(intArray500004);
       long endTime4 = System.currentTimeMillis();
       long executionTime4 = endTime4 - startTime4;
       System.out.print("   |   " + executionTime4);

       long startTime5 = System.currentTimeMillis();
       radixSort(intArray500005, 100000);
       long endTime5 = System.currentTimeMillis();
       long executionTime5 = endTime5 - startTime5;
       System.out.print("   |   " + executionTime5);

       System.out.print("\n---------------------------------------------------------------");

       long startTime6 = System.currentTimeMillis();
       selectionSort(intArray100000);
       long endTime6 = System.currentTimeMillis();
       long executionTime6 = endTime6 - startTime6;
       System.out.print("\n100,000    |  " + executionTime6);

       long startTime7 = System.currentTimeMillis();
       mergeSort(intArray1000002);
       long endTime7 = System.currentTimeMillis();
       long executionTime7 = endTime7 - startTime7;
       System.out.print("      |   " + executionTime7);

       long startTime8 = System.currentTimeMillis();
       quickSort(intArray1000003);
       long endTime8 = System.currentTimeMillis();
       long executionTime8 = endTime8 - startTime8;
       System.out.print("    |   " + executionTime8);

       long startTime9 = System.currentTimeMillis();
       heapSort(intArray1000004);
       long endTime9 = System.currentTimeMillis();
       long executionTime9 = endTime9 - startTime9;
       System.out.print("   |   " + executionTime9);

       long startTime10 = System.currentTimeMillis();
       radixSort(intArray1000005, 100000);
       long endTime10 = System.currentTimeMillis();
       long executionTime10 = endTime10 - startTime10;
       System.out.print("    |   " + executionTime10);

       System.out.print("\n---------------------------------------------------------------");
       long startTime11 = System.currentTimeMillis();
       selectionSort(intArray150000);
       long endTime11 = System.currentTimeMillis();
       long executionTime11 = endTime11 - startTime11;
       System.out.print("\n150,000    |  " + executionTime11);

       long startTime12 = System.currentTimeMillis();
       mergeSort(intArray1500002);
       long endTime12 = System.currentTimeMillis();
       long executionTime12 = endTime12 - startTime12;
       System.out.print("      |    " + executionTime12);

       long startTime13 = System.currentTimeMillis();
       quickSort(intArray1500003);
       long endTime13 = System.currentTimeMillis();
       long executionTime13 = endTime13 - startTime13;
       System.out.print("   |   " + executionTime13);

       long startTime14 = System.currentTimeMillis();
       heapSort(intArray1500004);
       long endTime14 = System.currentTimeMillis();
       long executionTime14 = endTime14 - startTime14;
       System.out.print("   |   " + executionTime14);

       long startTime15 = System.currentTimeMillis();
       radixSort(intArray1500005, 100000);
       long endTime15 = System.currentTimeMillis();
       long executionTime15 = endTime15 - startTime15;
       System.out.print("   |   " + executionTime15);

       System.out.print("\n---------------------------------------------------------------");

       long startTime20 = System.currentTimeMillis();
       selectionSort(intArray200000);
       long endTime20 = System.currentTimeMillis();
       long executionTime20 = endTime20 - startTime20;
       System.out.print("\n200,000    |   " + executionTime20);

       long startTime22 = System.currentTimeMillis();
       mergeSort(intArray2000002);
       long endTime22 = System.currentTimeMillis();
       long executionTime22 = endTime22 - startTime22;
       System.out.print("     |   " + executionTime22);

       long startTime23 = System.currentTimeMillis();
       quickSort(intArray2000003);
       long endTime23 = System.currentTimeMillis();
       long executionTime23 = endTime23 - startTime23;
       System.out.print("    |   " + executionTime23);

       long startTime24 = System.currentTimeMillis();
       heapSort(intArray2000004);
       long endTime24 = System.currentTimeMillis();
       long executionTime24 = endTime24 - startTime24;
       System.out.print("   |   " + executionTime24);

       long startTime25 = System.currentTimeMillis();
       radixSort(intArray2000005, 100000);
       long endTime25 = System.currentTimeMillis();
       long executionTime25 = endTime25 - startTime25;
       System.out.print("   |   " + executionTime25);

       System.out.print("\n---------------------------------------------------------------");

       long startTime26 = System.currentTimeMillis();
       selectionSort(intArray250000);
       long endTime26 = System.currentTimeMillis();
       long executionTime26 = endTime26 - startTime26;
       System.out.print("\n250,000    |   " + executionTime26);

       long startTime27 = System.currentTimeMillis();
       mergeSort(intArray2500002);
       long endTime27 = System.currentTimeMillis();
       long executionTime27 = endTime27 - startTime27;
       System.out.print("    |    " + executionTime27);

       long startTime28 = System.currentTimeMillis();
       quickSort(intArray2500003);
       long endTime28 = System.currentTimeMillis();
       long executionTime28 = endTime28 - startTime28;
       System.out.print("    |   " + executionTime28);

       long startTime29 = System.currentTimeMillis();
       heapSort(intArray2500004);
       long endTime29 = System.currentTimeMillis();
       long executionTime29 = endTime29 - startTime29;
       System.out.print("   |   " + executionTime29);

       long startTime30 = System.currentTimeMillis();
       radixSort(intArray2500005, 100000);
       long endTime30 = System.currentTimeMillis();
       long executionTime30 = endTime30 - startTime30;
       System.out.print("   |   " + executionTime30);

       System.out.print("\n---------------------------------------------------------------");

       long startTime31 = System.currentTimeMillis();
       selectionSort(intArray300000);
       long endTime31 = System.currentTimeMillis();
       long executionTime31 = endTime31 - startTime31;
       System.out.print("\n300,000    |   " + executionTime31);

       long startTime32 = System.currentTimeMillis();
       mergeSort(intArray3000002);
       long endTime32 = System.currentTimeMillis();
       long executionTime32 = endTime32 - startTime32;
       System.out.print("   |   " + executionTime32);

       long startTime33 = System.currentTimeMillis();
       quickSort(intArray3000003);
       long endTime33 = System.currentTimeMillis();
       long executionTime33 = endTime33 - startTime33;
       System.out.print("    |   " + executionTime33);

       long startTime34 = System.currentTimeMillis();
       heapSort(intArray3000004);
       long endTime34 = System.currentTimeMillis();
       long executionTime34 = endTime34 - startTime34;
       System.out.print("   |   " + executionTime34);

       long startTime35 = System.currentTimeMillis();
       radixSort(intArray3000005, 100000);
       long endTime35 = System.currentTimeMillis();
       long executionTime35 = endTime35 - startTime35;
       System.out.print("   |   " + executionTime35);
       System.out.println();
   }

   public static void selectionSort(int[] list) {
       int smallest;
       int smallestIndex;
       int swap;

       for (int i = 0; i < list.length; i++) {
           smallest = list[i];
           smallestIndex = i;

           for (int j = 1; j < list.length; j++) {
               if (list[j] < list[i]) {
                   smallest = list[j];
                   smallestIndex = j;
               }
           }
           if (smallest < list[i]) { //check if smallest is the first value
               swap = list[i];
               list[i] = list[smallestIndex];
               list[smallestIndex] = swap;
           }
       }
   }

   public static void merge(int[] list1, int[] list2, int[] temp) { //merge method for merge sort
       int current1 = 0;
       int current2 = 0;
       int current3 = 0;

       while (current1 < list1.length && current2 < list2.length) {
           if (list1[current1] < list2[current2]) {
               temp[current3++] = list1[current1++];
           } else {
               temp[current3++] = list2[current2++];
           }
       }

       while (current1 < list1.length) {
           temp[current3++] = list1[current1++];
       }

       while (current2 < list2.length) {
           temp[current3++] = list2[current2++];
       }
   }

   public static void mergeSort(int[] list) {
       if (list.length > 1) {
           int[] firstHalf = new int[list.length / 2];
           System.arraycopy(list, 0, firstHalf, 0, list.length / 2);
           mergeSort(firstHalf);

           int secondHalfLength = list.length - list.length / 2;
           int[] secondHalf = new int[secondHalfLength];
           System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);
           mergeSort(secondHalf);

           merge(firstHalf, secondHalf, list);
       }
   }

   public static void quickSort(int[] list) {
       quickSort(list, 0, list.length - 1);
   }

   private static void quickSort(int[] list, int first, int last) {
       if (last > first) {
           int pivotIndex = partition(list, first, last);
           quickSort(list, first, pivotIndex - 1);
           quickSort(list, pivotIndex + 1, last);
       }
   }

   private static int partition(int[] list, int first, int last) {
       int pivot = list[first];
       int low = first + 1;
       int high = last;

       while (high > low) {
           while (low <= high && list[low] <= pivot) {
               low++;
           }

           while (low <= high && list[high] > pivot) {
               high--;
           }

           if (high > low) {
               int temp = list[high];
               list[high] = list[low];
               list[low] = temp;
           }
       }

       while (high > first && list[high] >= pivot) {
           high--;
       }

       if (pivot > list[high]) {
           list[first] = list[high];
           list[high] = pivot;
           return high;
       } else {
           return first;
       }
   }

   public static void heapSort(int[] list) {
       Heap<Integer> heap = new Heap<>();

       for (int i = 0; i < list.length; i++) {
           heap.add(list[i]);
       }

       for (int i = list.length - 1; i >= 0; i--) {
           list[i] = heap.remove();
       }
   }

   public static void radixSort(int[] list, int maxOrder) {
       for (int order = 1; order < maxOrder; order *= 10) {
           ArrayList<Integer>[] bucket = new ArrayList[10];

           for (int i = 0; i < bucket.length; i++) {
               bucket[i] = new ArrayList<>();
           }
           for (int i = 0; i < list.length; i++) {
               bucket[(list[i] / order) % 10].add(list[i]);
           }

           int k = 0;
           for (int i = 0; i < bucket.length; i++) {
               if (bucket[i] != null) {
                   for (int j = 0; j < bucket[i].size(); j++) {
                       list[k++] = bucket[i].get(j);
                   }
               }
           }
       }
   }
}

//heap class for heapSort
class Heap<E extends Comparable<E>> {

   private java.util.ArrayList<E> list = new java.util.ArrayList<>();
   private java.util.Comparator<? super E> c;

   public Heap() {
       this.c = (e1, e2) -> ((Comparable<E>) e1).compareTo(e2);
   }

   public Heap(java.util.Comparator<E> c) {
       this.c = c;
   }

   public Heap(E[] objects) {
       this.c = (e1, e2) -> ((Comparable<E>) e1).compareTo(e2);
       for (int i = 0; i < objects.length; i++) {
           add(objects[i]);
       }
   }

   public void add(E newObject) {
       list.add(newObject);
       int currentIndex = list.size() - 1;

       while (currentIndex > 0) {
           int parentIndex = (currentIndex - 1) / 2;
           if (c.compare(list.get(currentIndex),
                   list.get(parentIndex)) > 0) {
               E temp = list.get(currentIndex);
               list.set(currentIndex, list.get(parentIndex));
               list.set(parentIndex, temp);
           } else {
               break;
           }

           currentIndex = parentIndex;
       }
   }

   public E remove() {
       if (list.size() == 0) {
           return null;
       }

       E removedObject = list.get(0);
       list.set(0, list.get(list.size() - 1));
       list.remove(list.size() - 1);

       int currentIndex = 0;
       while (currentIndex < list.size()) {
           int leftChildIndex = 2 * currentIndex + 1;
           int rightChildIndex = 2 * currentIndex + 2;

           if (leftChildIndex >= list.size()) {
               break;
           }
           int maxIndex = leftChildIndex;
           if (rightChildIndex < list.size()) {
               if (c.compare(list.get(maxIndex),
                       list.get(rightChildIndex)) < 0) {
                   maxIndex = rightChildIndex;
               }
           }

           if (c.compare(list.get(currentIndex),
                   list.get(maxIndex)) < 0) {
               E temp = list.get(maxIndex);
               list.set(maxIndex, list.get(currentIndex));
               list.set(currentIndex, temp);
               currentIndex = maxIndex;
           } else {
               break;
           }
       }

       return removedObject;
   }

   public int getSize() {
       return list.size();
   }

   public boolean isEmpty() {
       return list.size() == 0;
   }
}
